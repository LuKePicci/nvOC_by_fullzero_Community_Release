#!/usr/bin/env python2.7
# _*_ coding: utf-8 _*_
#### Whattomine auto switch written by papampi + hurvajs77 + damNmad
### papampi BTC address:  1NsnsnqkkVuopTGvUSGrkMhhug8kg6zgP9
### damNmad BTC address:  1Mtf6K7c3ZhBDcPz91c4wcQ95DxLn88zC
### hurvajs77 BTC address:  3NRMRn3ZKrxwQqkwPfEsjb14dkVDWobyBC

import json
import requests
import sys
import urllib
import urllib2
configFile = "./WTM.json"
topCoinLogFile = "./WTM_top_coin"

# load config
cfg = json.loads(open(configFile).read())
requestUrl = urllib.unquote(urllib.unquote(cfg["WTM_URL"]))
minimumDifference = float(cfg["WTM_MIN_DIFFERENCE"])
includedCoins = cfg["WTM_COINS"].upper()
delimiter = ";"
currency=cfg["currency"]

# load included coins
includedCoins = includedCoins.strip(delimiter)

if not includedCoins:
    print "No incluted coins. Please, check 1bash script for WTM settings."
    sys.exit()

includedCoins = includedCoins.split(delimiter)


def saveTopCoin(data):
    logFile = open(topCoinLogFile, "w")
    logFile.write(data)
    logFile.close()
    return

#Get BTC exchange rate from blockchain.info
try:
    exchrate=float(json.loads(urllib2.urlopen("https://blockchain.info/ticker").read())[currency]["last"])
except:
    print("Can not get data from blockchain.info")
    sys.exit()
    raise

#BTC Rates for web, output, ...
print "BTC PRICE: " + str(exchrate) + " " + str(currency)
exchrateLog = open("WTM_BTC_EXCHANGE_RATE", "w")
exchrateLog.write(str(exchrate) + " " + str(currency))
exchrateLog.close()

# try load previous top coin
try:
    with open(topCoinLogFile) as contentFile:
        content = contentFile.read()
except:
    content = "-:0"

miningCoin = content.split(":")
print "Currently mining coin: %s, last profit: %s" % (miningCoin[0], miningCoin[1])

try:
    httpResponse = requests.get(requestUrl)
except:
    print("Can not get data from WhatToMine.com.")
    sys.exit()
    raise

try:
    data = httpResponse.json()['coins']
    data = data.values()
except:
    print "Invalid JSON"
    sys.exit()
    raise

# filter WTM coins by user selection only
for i in reversed(data):
    if i["tag"] not in includedCoins:
        data.remove(i)

# calculate coin revenue
#print currency + " Revenue"
newRev = {}
for i in data:
    newRev[i["tag"]] = float(i["btc_revenue"])
newRev = sorted(newRev.items(), key=lambda x: x[1], reverse=True)
#save current revenue
RevLog = open("WTM_current_revenue", "w")
for i, j in newRev:
    RevLog.write("%s:%s\n" % (i, '%02.2f' %(j*exchrate) ))
    print  i, '%02.2f' %(j*exchrate) +" " + currency
RevLog.close()

# sort by coin profitability
updatedTopCoins = sorted(data, key=lambda x: x["profitability"], reverse=True)

# save current profit
print "New profits"
profitLog = open("WTM_current_profit", "w")
for i in updatedTopCoins:
    profitLog.write("%s:%s\n" % (i["tag"], i["profitability"]))
    print "%s: %s %%" % (i["tag"], i["profitability"])
profitLog.close()

# is currently mining coin the same as most profitable coin at the moment?
if miningCoin[0] == updatedTopCoins[0]["tag"]:
    print "Same coin, no switch"
    saveTopCoin(str(updatedTopCoins[0]["tag"]) + ":" + str(updatedTopCoins[0]["profitability"]))
    sys.exit()

# corrently mining coin is no more the top one

oldTopCoin = { "tag": "-", "profitability": 0 }
try:
    oldTopCoin = filter(lambda x: x["tag"] == miningCoin[0], data)[0]
except:
    print "Currently mining coin was not found in inclusion list, will switch to the new best one"

# try parse new top coins and compare their profit with current mining coin profit
try:
    if (float(updatedTopCoins[0]["profitability"]) - minimumDifference) >= float(oldTopCoin["profitability"]):
        print "Currently mining %s coin is no longer more profitabile with %s" % (miningCoin[0], miningCoin[1])
        print "Switching to new %s coin %s" % (updatedTopCoins[0]["tag"], updatedTopCoins[0]["profitability"])
    else:
        print "Currently mining coin is still enaugh profitabile w.r.t. the new top coin"
        print "Keep mining %s " % miningCoin[0]
        saveTopCoin(miningCoin[0] + ":" + oldTopCoin["profitability"])
        sys.exit()
except:
# Some errors
    print ""
    sys.exit()

saveTopCoin(str(updatedTopCoins[0]["tag"]) + ":" + str(updatedTopCoins[0]["profitability"]))
